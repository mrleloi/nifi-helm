apiVersion: v1
data:
  JAVA_OPTS: -XX:UseAVX=0 -Djavax.net.debug=ssl,handshake
  KEYSTORE_PASSWORD: th1s1s3up34e5r37
  KEYSTORE_PATH: ${NIFI_HOME}/keytool/keystore.p12
  KEYSTORE_TYPE: PKCS12
  NIFI_ANALYTICS_PREDICT_ENABLED: "true"
  NIFI_CLUSTER_IS_NODE: "true"
  NIFI_CLUSTER_NODE_CONNECTION_TIMEOUT: 5 min
  NIFI_CLUSTER_NODE_EVENT_HISTORY_SIZE: "25"
  NIFI_CLUSTER_NODE_PROTOCOL_MAX_THREADS: "20"
  NIFI_CLUSTER_NODE_PROTOCOL_PORT: "11443"
  NIFI_CLUSTER_NODE_PROTOCOL_THREADS: "10"
  NIFI_CLUSTER_NODE_READ_TIMEOUT: 5 min
  NIFI_CLUSTER_PROTOCOL_CONNECTION_HANDSHAKE_TIMEOUT: 3 min
  NIFI_CLUSTER_PROTOCOL_HEARTBEAT_INTERVAL: 2 min
  NIFI_CLUSTER_PROTOCOL_IS_SECURE: "true"
  NIFI_ELECTION_MAX_CANDIDATES: "1"
  NIFI_ELECTION_MAX_WAIT: 2 min
  NIFI_JVM_HEAP_INIT: 2g
  NIFI_JVM_HEAP_MAX: 2g
  NIFI_SECURITY_AUTORELOAD_ENABLED: "true"
  NIFI_SECURITY_AUTORELOAD_INTERVAL: 5 min
  NIFI_SECURITY_NEEDCLIENTAUTH: "true"
  NIFI_SENSITIVE_PROPS_KEY: th1s1s3up34e5r37
  NIFI_SENSITIVE_PROPS_KEY_PROTECTED: th1s1s3up34e5r37
  NIFI_WEB_HTTPS_PORT: "8443"
  NIFI_WEB_PROXY_HOST: nifi.baityapp.online
  NIFI_ZK_CONNECT_STRING: zookeeper:2181
  NIFI_ZOOKEEPER_CONNECT_STRING: zookeeper:2181
  SINGLE_USER_CREDENTIALS_PASSWORD: 123456@Baityapp
  SINGLE_USER_CREDENTIALS_USERNAME: admin
  TRUSTSTORE_PASSWORD: th1s1s3up34e5r37
  TRUSTSTORE_PATH: ${NIFI_HOME}/keytool/truststore.jks
  TRUSTSTORE_TYPE: jks
kind: ConfigMap
metadata:
  annotations:
    app.kubernetes.io/managed-by: kustomization
  name: nifi-cm
---
apiVersion: v1
data:
  security.sh: "#!/bin/bash\nset -ex -o allexport\n\nORGANISATION_UNIT=${ORGANISATION_UNIT:-'Cloud
    Services Application'}\nORGANISATION=${ORGANISATION:-'Cloud Services'}\nPUBLIC_DNS=${POD_NAME:-'nifi.tld'}\nCITY=${CITY:-'London'}\nSTATE=${STATE:-'London'}\nCOUNTRY_CODE=${COUNTRY_CODE:-'GB'}\nKEY_PASS=${KEY_PASS:-$KEYSTORE_PASS}\nKEYSTORE_PASS=${KEYSTORE_PASS:-$NIFI_SENSITIVE_PROPS_KEY}\nKEYSTORE_PASSWORD=${KEYSTORE_PASSWORD:-$NIFI_SENSITIVE_PROPS_KEY}\nKEYSTORE_PATH=${NIFI_HOME}/keytool/keystore.p12\nKEYSTORE_TYPE=jks\nTRUSTSTORE_PASS=${TRUSTSTORE_PASS:-$NIFI_SENSITIVE_PROPS_KEY}\nTRUSTSTORE_PASSWORD=${TRUSTSTORE_PASSWORD:-$NIFI_SENSITIVE_PROPS_KEY}\nTRUSTSTORE_PATH=${NIFI_HOME}/keytool/truststore.jks\nTRUSTSTORE_TYPE=jks\n\nif
    [[ ! -f \"${NIFI_HOME}/keytool/keystore.p12\" ]]\nthen\n  echo \"Creating keystore\"\n
    \ keytool -genkey -noprompt -alias nifi-keystore \\\n  -dname \"CN=${POD_NAME},OU=${ORGANISATION_UNIT},O=${ORGANISATION},L=${CITY},S=${STATE},C=${COUNTRY_CODE}\"
    \\\n  -keystore ${NIFI_HOME}/keytool/keystore.p12 \\\n  -storepass ${KEYSTORE_PASS:-$NIFI_SENSITIVE_PROPS_KEY}
    \\\n  -KeySize 2048 \\\n  -keypass \"${KEY_PASS:-$NIFI_SENSITIVE_PROPS_KEY}\"
    \\\n  -keyalg RSA \\\n  -storetype pkcs12\nfi\n\nif [[ ! -f \"${NIFI_HOME}/keytool/truststore.jks\"
    ]]\nthen\n  echo \"Creating truststore\"\n  keytool -genkey -noprompt -alias nifi-truststore
    \\\n  -dname \"CN=${POD_NAME},OU=${ORGANISATION_UNIT},O=${ORGANISATION},L=${CITY},S=${STATE},C=${COUNTRY_CODE}\"
    \\\n  -keystore ${NIFI_HOME}/keytool/truststore.jks \\\n  -storetype jks \\\n
    \ -keypass ${KEYSTORE_PASS:-$NIFI_SENSITIVE_PROPS_KEY} \\\n  -storepass ${KEY_PASS:-$NIFI_SENSITIVE_PROPS_KEY}
    \\\n  -KeySize 2048\nfi\n\n#/usr/bin/bash ${NIFI_HOME}/../scripts/secure.sh \n#eval
    ${NIFI_HOME}/../scripts/secure.sh \n"
kind: ConfigMap
metadata:
  annotations:
    app.kubernetes.io/managed-by: kustomization
  name: nifi-ssl-cm
---
apiVersion: v1
data:
  ALLOW_ANONYMOUS_LOGIN: "yes"
  ZOO_ADMINSERVER_ENABLED: "false"
  ZOO_AUTOPURGE_PURGEINTERVAL: "2"
  ZOO_AUTOPURGE_SNAPRETAINCOUNT: "10"
  ZOO_CFG_EXTRA: metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider
    metricsProvider.httpPort=7070
  ZOO_INIT_LIMIT: "10"
  ZOO_STANDALONE_ENABLED: "true"
  ZOO_SYNC_LIMIT: "6"
  ZOO_TICK_TIME: "4000"
kind: ConfigMap
metadata:
  annotations:
    app.kubernetes.io/managed-by: kustomization
  name: zookeeper-cm
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    app.kubernetes.io/managed-by: kustomization
    app.kubernetes.io/name: nifi
    app.kubernetes.io/part-of: nifi
  labels:
    app: nifi
  name: nifi
spec:
  ports:
  - name: cluster-lb
    port: 6342
    protocol: TCP
    targetPort: 6342
  - name: http
    port: 8080
    protocol: TCP
    targetPort: 8080
  - name: upload
    port: 8441
    protocol: TCP
    targetPort: 8441
  - name: https
    port: 8443
    protocol: TCP
    targetPort: 8443
  - name: cluster
    port: 11443
    protocol: TCP
    targetPort: 11443
  selector:
    app: nifi
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    app.kubernetes.io/managed-by: kustomization
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/part-of: nifi
  labels:
    app: zookeeper
  name: zookeeper
spec:
  ports:
  - name: zk
    port: 2181
    protocol: TCP
    targetPort: 2181
  - name: web
    port: 8080
    protocol: TCP
    targetPort: 8080
  - name: metrics
    port: 7070
    protocol: TCP
    targetPort: 7070
  selector:
    app: zookeeper
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    app.kubernetes.io/managed-by: kustomization
  creationTimestamp: null
  labels:
    io.kompose.service: nifi-conf
  name: nifi-conf
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    app.kubernetes.io/managed-by: kustomization
  creationTimestamp: null
  labels:
    io.kompose.service: nifi-content
  name: nifi-content
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    app.kubernetes.io/managed-by: kustomization
  creationTimestamp: null
  labels:
    io.kompose.service: nifi-data
  name: nifi-data
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    app.kubernetes.io/managed-by: kustomization
  creationTimestamp: null
  labels:
    io.kompose.service: nifi-database
  name: nifi-database
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    app.kubernetes.io/managed-by: kustomization
  creationTimestamp: null
  labels:
    io.kompose.service: nifi-extensions
  name: nifi-extensions
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    app.kubernetes.io/managed-by: kustomization
  creationTimestamp: null
  labels:
    io.kompose.service: nifi-flowfile
  name: nifi-flowfile
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    app.kubernetes.io/managed-by: kustomization
  creationTimestamp: null
  labels:
    io.kompose.service: nifi-keytool
  name: nifi-keytool
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    app.kubernetes.io/managed-by: kustomization
  creationTimestamp: null
  labels:
    io.kompose.service: nifi-lib
  name: nifi-lib
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    app.kubernetes.io/managed-by: kustomization
  creationTimestamp: null
  labels:
    io.kompose.service: nifi-logs
  name: nifi-logs
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    app.kubernetes.io/managed-by: kustomization
  creationTimestamp: null
  labels:
    io.kompose.service: nifi-provenance
  name: nifi-provenance
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    app.kubernetes.io/managed-by: kustomization
  creationTimestamp: null
  labels:
    io.kompose.service: nifi-scripts
  name: nifi-scripts
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    app.kubernetes.io/managed-by: kustomization
  creationTimestamp: null
  labels:
    io.kompose.service: nifi-temp
  name: nifi-temp
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    app.kubernetes.io/managed-by: kustomization
  creationTimestamp: null
  labels:
    io.kompose.service: nifi-upload
  name: nifi-upload
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
status: {}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    app.kubernetes.io/managed-by: kustomization
    app.kubernetes.io/name: nifi
    app.kubernetes.io/part-of: nifi
  labels:
    app: nifi
    name: nifi
  name: nifi
spec:
  podManagementPolicy: OrderedReady
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: nifi
  serviceName: nifi
  template:
    metadata:
      annotations:
        app.kubernetes.io/managed-by: kustomization
      labels:
        app: nifi
    spec:
      automountServiceAccountToken: false
      containers:
      - env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NIFI_UI_BANNER_TEXT
          value: $(POD_NAME)
        - name: NIFI_WEB_HTTPS_HOST
          value: $(POD_NAME).nifi.$(POD_NAMESPACE).svc.cluster.local
        - name: NIFI_CLUSTER_NODE_ADDRESS
          value: $(POD_NAME).nifi.$(POD_NAMESPACE).svc.cluster.local
        - name: NIFI_REMOTE_INPUT_SOCKET_HOST
          value: $(POD_NAME).nifi.$(POD_NAMESPACE).svc.cluster.local
        - name: NIFI_REMOTE_INPUT_HOST
          value: $(POD_NAME).nifi.$(POD_NAMESPACE).svc.cluster.local
        - name: HOSTNAME
          value: $(POD_IP)
        - name: NODE_IDENTITY
          value: $(POD_NAME)
        envFrom:
        - configMapRef:
            name: nifi-cm
            optional: false
        image: harbor.baityapp.online/core/nifi:1.25.0
        imagePullPolicy: IfNotPresent
        lifecycle:
          postStart:
            exec:
              command:
              - /scripts/security.sh
        livenessProbe:
          exec:
            command:
            - pgrep
            - java
          failureThreshold: 3
          initialDelaySeconds: 60
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 10
        name: nifi
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 11443
          name: cluster
        - containerPort: 8443
          name: https
        - containerPort: 8441
          name: upload
        - containerPort: 6342
          name: cluster-lb
        readinessProbe:
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          tcpSocket:
            port: cluster
          timeoutSeconds: 10
        resources:
          limits: null
          requests: null
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
        volumeMounts:
        - mountPath: /opt/nifi/nifi-current/temp
          name: nifi-temp
        - mountPath: /opt/nifi/nifi-current/scripts
          name: nifi-scripts
        - mountPath: /opt/nifi/nifi-current/lib
          name: nifi-lib
        - mountPath: /opt/nifi/nifi-current/logs
          name: nifi-logs
        - mountPath: /opt/nifi/nifi-current/data
          name: nifi-data
        - mountPath: /opt/nifi/nifi-current/flowfile_repository
          name: nifi-flowfile
        - mountPath: /opt/nifi/nifi-current/conf
          name: nifi-conf
        - mountPath: /opt/nifi/nifi-current/content_repository
          name: nifi-content
        - mountPath: /opt/nifi/nifi-current/upload
          name: nifi-upload
        - mountPath: /opt/nifi/nifi-current/provenance_repository
          name: nifi-provenance
        - mountPath: /opt/nifi/nifi-current/database_repository
          name: nifi-database
        - mountPath: /opt/nifi/nifi-current/extensions
          name: nifi-extensions
        - mountPath: /opt/nifi/nifi-current/keytool
          name: nifi-keytool
        - mountPath: /scripts/security.sh
          name: scripts
          readOnly: false
          subPath: security.sh
      dnsPolicy: ClusterFirstWithHostNet
      enableServiceLinks: false
      imagePullSecrets:
      - name: harbor-loild-nifi
      initContainers:
      - command:
        - sh
        - -c
        - |
          echo "Connecting to Zookeeper ${NIFI_ZK_CONNECT_STRING}"
          until nc -vzw 1 zookeeper 2181 ; do
            echo "Waiting for zookeeper to start"
            sleep 3
          done
        envFrom:
        - configMapRef:
            name: nifi-cm
            optional: false
        image: docker.io/busybox:1.36
        name: wait-for-zookeeper
        resources:
          limits: null
          requests: null
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
      restartPolicy: Always
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
        seccompProfile:
          type: RuntimeDefault
      setHostnameAsFQDN: true
      volumes:
      - emptyDir:
          sizeLimit: 3Gi
        name: data
      - name: nifi-scripts
        persistentVolumeClaim:
          claimName: nifi-scripts
      - name: nifi-lib
        persistentVolumeClaim:
          claimName: nifi-lib
      - name: nifi-logs
        persistentVolumeClaim:
          claimName: nifi-logs
      - name: nifi-temp
        persistentVolumeClaim:
          claimName: nifi-temp
      - name: nifi-data
        persistentVolumeClaim:
          claimName: nifi-data
      - name: nifi-flowfile
        persistentVolumeClaim:
          claimName: nifi-flowfile
      - name: nifi-conf
        persistentVolumeClaim:
          claimName: nifi-conf
      - name: nifi-content
        persistentVolumeClaim:
          claimName: nifi-content
      - name: nifi-upload
        persistentVolumeClaim:
          claimName: nifi-upload
      - name: nifi-provenance
        persistentVolumeClaim:
          claimName: nifi-provenance
      - name: nifi-database
        persistentVolumeClaim:
          claimName: nifi-database
      - name: nifi-extensions
        persistentVolumeClaim:
          claimName: nifi-extensions
      - name: nifi-keytool
        persistentVolumeClaim:
          claimName: nifi-keytool
      - configMap:
          defaultMode: 493
          name: nifi-ssl-cm
          optional: false
        name: scripts
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    app.kubernetes.io/managed-by: kustomization
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/part-of: nifi
  labels:
    app: zookeeper
    name: zookeeper
  name: zookeeper
spec:
  podManagementPolicy: OrderedReady
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: zookeeper
  serviceName: zookeeper
  template:
    metadata:
      annotations:
        app.kubernetes.io/managed-by: kustomization
      labels:
        app: zookeeper
    spec:
      automountServiceAccountToken: false
      containers:
      - env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: ZOO_SERVERS
          value: server.1=$(POD_IP):2888:3888;2181
        envFrom:
        - configMapRef:
            name: zookeeper-cm
            optional: false
        image: docker.io/zookeeper:3.9
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - which
            - java
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 10
        name: zookeeper
        ports:
        - containerPort: 2181
          name: zk
        - containerPort: 8080
          name: http
        - containerPort: 7070
          name: metrics
        readinessProbe:
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 30
          successThreshold: 1
          tcpSocket:
            port: zk
          timeoutSeconds: 10
        resources:
          limits: null
          requests: null
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /data
          name: data
          subPath: data
        - mountPath: /datalog
          name: data
          subPath: datalog
        - mountPath: /conf
          name: data
          subPath: conf
      dnsPolicy: ClusterFirstWithHostNet
      enableServiceLinks: false
      restartPolicy: Always
      securityContext:
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
        seccompProfile:
          type: RuntimeDefault
      setHostnameAsFQDN: true
      volumes:
      - emptyDir:
          sizeLimit: 2Gi
        name: data
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  annotations:
    app.kubernetes.io/managed-by: kustomization
  labels:
    app.kubernetes.io/name: nifi
  name: nifi
spec:
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 300
  maxReplicas: 8
  metrics:
  - resource:
      name: memory
      target:
        averageUtilization: 90
        type: Utilization
    type: Resource
  - resource:
      name: cpu
      target:
        averageUtilization: 90
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: nifi
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    app.kubernetes.io/managed-by: kustomization
    app.kubernetes.io/name: nifi
    app.kubernetes.io/part-of: nifi
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/configuration-snippet: |
      server_tokens off;
  labels:
    app: nifi
  name: nifi
spec:
  rules:
  - host: nifi.baityapp.online
    http:
      paths:
      - backend:
          service:
            name: nifi
            port:
              number: 8441
        path: /nifi/upload
        pathType: Prefix
      - backend:
          service:
            name: nifi
            port:
              number: 8443
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - nifi.baityapp.online
    secretName: nifi.baityapp.online-ssl
